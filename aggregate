#!/usr/bin/perl -w

use strict;
use Getopt::Long;

my $mode = 'add';

GetOptions(
  'add'         => sub { $mode = 'add'; },
  'list'        => sub { $mode = 'list'; },
  'frequencies' => sub { $mode = 'freq'; },
  'help'        => sub { usage() },
);

my %table;

while (<>) {
  chomp;
  (my $k, my $v) = split;

  if ($mode eq 'list') { # list
    push @{ $table{$k} }, $v;
  } elsif ($mode eq 'freq') { # frequencies
    $table{$k}->{$v}++;
  } else { # sum
    $table{$k} += $v;
  }
}

while ((my $k, my $v) = each %table) {
  if ($mode eq 'list')  {
    print "$k ", scalar @$v, " ", join(" ", @$v), "\n";
  }  elsif ($mode eq 'freq') {
    my @vs = sort { $v->{$b} <=> $v->{$a} } keys %$v;
    print "$k";
    for my $a (@vs) {
      print " ", $v->{$a}, " ", $a;
    }
    print "\n";
  } else {
    print "$k $v\n";
  }
}

sub usage {
  print <<'USAGE';
Usage: aggregate [options] [FILE]

Description:
Assume that each line in the input is a `key value` pair, and aggregate
together all the values of each key. The default options assume that each
`value` is a number, and adds them all together.

The following options, which select the aggregation operation, are available.

-add
  The default. Assumes that each `value` is a number, and adds together all
  the values of each key.
  
-list
  Simply collects together all the values of each key, discarding duplicates.
  
-frequency
  Also collects all values, but also reports the number of times that it
  occurred as value of the key.
USAGE

  exit 1;
}
